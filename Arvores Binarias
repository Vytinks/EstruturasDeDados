class Node:
    def __init__(self, value):
        self.value = value  # valor do nó
        self.left = None    # filho esquerdo
        self.right = None   # filho direito

class BinaryTree:
    def __init__(self):
        self.root = None   # raiz da árvore

    def insert(self, value):
        if self.root is None:
            self.root = Node(value)
        else:
            self._insert_recursive(self.root, value)
    
    def _insert_recursive(self, node, value):
        if value < node.value:
            if node.left is None:
                node.left = Node(value)
            else:
                self._insert_recursive(node.left, value)
        else:
            if node.right is None:
                node.right = Node(value)
            else:
                self._insert_recursive(node.right, value)
    
    def search(self, value):
        return self._search_recursive(self.root, value)
    
    def _search_recursive(self, node, value):
        if node is None or node.value == value:
            return node
        elif value < node.value:
            return self._search_recursive(node.left, value)
        else:
            return self._search_recursive(node.right, value)
    
    def inorder_traversal(self):
        result = []
        self._inorder_recursive(self.root, result)
        return result

    def _inorder_recursive(self, node, result):
        if node:
            self._inorder_recursive(node.left, result)
            result.append(node.value)
            self._inorder_recursive(node.right, result)

# Testando a árvore binária
bt = BinaryTree()
bt.insert(10)
bt.insert(5)
bt.insert(15)
bt.insert(2)
bt.insert(7)

print("Busca por 7:", bt.search(7).value if bt.search(7) else "Não encontrado")
print("Percurso em ordem:", bt.inorder_traversal())
Explicação:
Classe Node: Representa cada nó da árvore. Cada nó tem um valor e dois filhos: esquerdo e direito.
Classe BinaryTree: Representa a árvore binária em si. Ela tem métodos para inserir novos valores e buscar valores. A busca e inserção são feitas de forma recursiva.
Percurso em ordem: A função inorder_traversal realiza o percurso em ordem, ou seja, ela visita primeiro o subárvore esquerda, depois o nó atual, e depois a subárvore direita.
Exemplo 2: Árvore Binária de Pesquisa (BST)
Uma árvore binária de pesquisa tem a propriedade de que, para cada nó, todos os valores à esquerda são menores e todos os valores à direita são maiores.

Aqui está uma versão de uma árvore binária de pesquisa com operações básicas:
class BSTNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

class BST:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = BSTNode(key)
        else:
            self._insert_recursive(self.root, key)

    def _insert_recursive(self, root, key):
        if key < root.value:
            if root.left is None:
                root.left = BSTNode(key)
            else:
                self._insert_recursive(root.left, key)
        elif key > root.value:
            if root.right is None:
                root.right = BSTNode(key)
            else:
                self._insert_recursive(root.right, key)

    def search(self, key):
        return self._search_recursive(self.root, key)

    def _search_recursive(self, root, key):
        if root is None or root.value == key:
            return root
        if key < root.value:
            return self._search_recursive(root.left, key)
        return self._search_recursive(root.right, key)

    def inorder(self):
        return self._inorder_recursive(self.root)

    def _inorder_recursive(self, root):
        return self._inorder_recursive(root.left) + [root.value] + self._inorder_recursive(root.right) if root else []

# Testando a árvore binária de pesquisa
bst = BST()
bst.insert(15)
bst.insert(10)
bst.insert(20)
bst.insert(5)
bst.insert(12)

print("Percurso em ordem:", bst.inorder())  # [5, 10, 12, 15, 20]
print("Busca por 10:", bst.search(10).value if bst.search(10) else "Não encontrado")
Explicação:
BSTNode: Representa um nó da árvore binária de pesquisa. Contém o valor e os ponteiros para os filhos esquerdo e direito.
BST: Classe que implementa a árvore binária de pesquisa, com métodos para inserir, buscar e percorrer a árvore em ordem.
Exemplo 3: Remover um nó (com dois filhos)
Aqui está uma versão simplificada para remover um nó de uma árvore binária de pesquisa:
class BSTNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

class BST:
    def __init__(self):
        self.root = None

    def insert(self, key):
        if self.root is None:
            self.root = BSTNode(key)
        else:
            self._insert_recursive(self.root, key)

    def _insert_recursive(self, root, key):
        if key < root.value:
            if root.left is None:
                root.left = BSTNode(key)
            else:
                self._insert_recursive(root.left, key)
        elif key > root.value:
            if root.right is None:
                root.right = BSTNode(key)
            else:
                self._insert_recursive(root.right, key)

    def delete(self, key):
        self.root = self._delete_recursive(self.root, key)

    def _delete_recursive(self, root, key):
        if root is None:
            return root
        if key < root.value:
            root.left = self._delete_recursive(root.left, key)
        elif key > root.value:
            root.right = self._delete_recursive(root.right, key)
        else:
            # Caso 1: nó com apenas um filho ou nenhum
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            # Caso 2: nó com dois filhos
            root.value = self._min_value_node(root.right).value
            root.right = self._delete_recursive(root.right, root.value)
        return root

    def _min_value_node(self, root):
        current = root
        while current.left:
            current = current.left
        return current

    def inorder(self):
        return self._inorder_recursive(self.root)

    def _inorder_recursive(self, root):
        return self._inorder_recursive(root.left) + [root.value] + self._inorder_recursive(root.right) if root else []

# Testando a remoção de um nó
bst = BST()
bst.insert(20)
bst.insert(10)
bst.insert(30)
bst.insert(5)
bst.insert(15)
bst.delete(10)

print("Percurso em ordem após remoção de 10:", bst.inorder())  # [5, 15, 20, 30]
Explicação:
Remoção de um nó: Para remover um nó de uma árvore binária de pesquisa, temos três casos:
Caso 1: O nó tem nenhum ou um filho.
Caso 2: O nó tem dois filhos, e nesse caso, encontramos o menor valor na subárvore direita para substituir o nó removido.
